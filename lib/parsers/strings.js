"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseVarChar = exports.parseUsername = exports.parseUrl = exports.parseString = exports.parsePassword = exports.parseId = exports.parseEmail = exports.parseChar = void 0;

var _lodash = require("lodash");

const parseChar = (str, max) => {
  if ((0, _lodash.isString)(str) && str !== 'undefined') {
    str = (0, _lodash.replace)(str, /[^a-zA-Z]+/g, '').substr(0, max);
  } else {
    str = '';
  }

  return str.trim();
};

exports.parseChar = parseChar;

const parseEmail = email => {
  email = (email || '').trim().substr(0, 128).toLowerCase();
  const regex = /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/;
  return email !== '' && regex.test(email) ? email : '';
};

exports.parseEmail = parseEmail;

const parseId = id => {
  if ((0, _lodash.isString)(id) && id !== 'undefined') {
    id = (0, _lodash.replace)(id, /[^\w]/g, '').substr(0, 32);
  } else {
    id = '';
  }

  return id.trim();
};

exports.parseId = parseId;

const parsePassword = password => {
  return (password || '').trim().substr(0, 32);
};

exports.parsePassword = parsePassword;

const parseString = (str, max, defaultValue = '') => {
  if (str) {
    if (max) {
      str = str.toString().substr(0, max);
    } else {
      str = str.toString();
    }
  } else {
    str = '';
  }

  str = str.trim();

  if (defaultValue && str === '') {
    str = defaultValue;
  }

  return str;
};

exports.parseString = parseString;

const parseUrl = url => {
  if ((0, _lodash.isString)(url) && url !== 'undefined') {
    url = encodeURI(url);
  } else {
    url = '';
  }

  return url.trim();
};

exports.parseUrl = parseUrl;

const parseUsername = username => {
  if ((0, _lodash.isString)(username) && username !== 'undefined') {
    username = username.replace(/[^\w]/g, '').substr(0, 32);
  } else {
    username = '';
  }

  return username.trim().toLowerCase();
};

exports.parseUsername = parseUsername;

const parseVarChar = (str, max, defaultValue = '') => {
  if (str) {
    str = (0, _lodash.replace)(str.toString().trim(), /[^\w\s]/g, '');

    if (max) {
      str = str.substr(0, max);
    }
  } else {
    str = '';
  }

  if (defaultValue && str === '') {
    str = defaultValue;
  }

  return str;
};

exports.parseVarChar = parseVarChar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXJzL3N0cmluZ3MudHMiXSwibmFtZXMiOlsicGFyc2VDaGFyIiwic3RyIiwibWF4Iiwic3Vic3RyIiwidHJpbSIsInBhcnNlRW1haWwiLCJlbWFpbCIsInRvTG93ZXJDYXNlIiwicmVnZXgiLCJ0ZXN0IiwicGFyc2VJZCIsImlkIiwicGFyc2VQYXNzd29yZCIsInBhc3N3b3JkIiwicGFyc2VTdHJpbmciLCJkZWZhdWx0VmFsdWUiLCJ0b1N0cmluZyIsInBhcnNlVXJsIiwidXJsIiwiZW5jb2RlVVJJIiwicGFyc2VVc2VybmFtZSIsInVzZXJuYW1lIiwicmVwbGFjZSIsInBhcnNlVmFyQ2hhciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVPLE1BQU1BLFlBQVksQ0FBQ0MsR0FBRCxFQUFjQyxHQUFkLEtBQXVDO0FBQzlELE1BQUcsc0JBQVNELEdBQVQsS0FBaUJBLFFBQVEsV0FBNUIsRUFBeUM7QUFDdkNBLFVBQU0scUJBQVFBLEdBQVIsRUFBYSxhQUFiLEVBQTRCLEVBQTVCLEVBQWdDRSxNQUFoQyxDQUF1QyxDQUF2QyxFQUEwQ0QsR0FBMUMsQ0FBTjtBQUNELEdBRkQsTUFFTztBQUNMRCxVQUFNLEVBQU47QUFDRDs7QUFFRCxTQUFPQSxJQUFJRyxJQUFKLEVBQVA7QUFDRCxDQVJNOzs7O0FBVUEsTUFBTUMsYUFBY0MsS0FBRCxJQUEyQjtBQUNuREEsVUFBUSxDQUFDQSxTQUFTLEVBQVYsRUFBY0YsSUFBZCxHQUFxQkQsTUFBckIsQ0FBNEIsQ0FBNUIsRUFBK0IsR0FBL0IsRUFBb0NJLFdBQXBDLEVBQVI7QUFDQSxRQUFNQyxRQUFRLDZDQUFkO0FBRUEsU0FBT0YsVUFBVSxFQUFWLElBQWdCRSxNQUFNQyxJQUFOLENBQVdILEtBQVgsQ0FBaEIsR0FBb0NBLEtBQXBDLEdBQTRDLEVBQW5EO0FBQ0QsQ0FMTTs7OztBQU9BLE1BQU1JLFVBQVdDLEVBQUQsSUFBd0I7QUFDN0MsTUFBRyxzQkFBU0EsRUFBVCxLQUFnQkEsT0FBTyxXQUExQixFQUF1QztBQUNyQ0EsU0FBSyxxQkFBUUEsRUFBUixFQUFZLFFBQVosRUFBc0IsRUFBdEIsRUFBMEJSLE1BQTFCLENBQWlDLENBQWpDLEVBQW9DLEVBQXBDLENBQUw7QUFDRCxHQUZELE1BRU87QUFDTFEsU0FBSyxFQUFMO0FBQ0Q7O0FBRUQsU0FBT0EsR0FBR1AsSUFBSCxFQUFQO0FBQ0QsQ0FSTTs7OztBQVVBLE1BQU1RLGdCQUFpQkMsUUFBRCxJQUE4QjtBQUN6RCxTQUFPLENBQUNBLFlBQVksRUFBYixFQUFpQlQsSUFBakIsR0FBd0JELE1BQXhCLENBQStCLENBQS9CLEVBQWtDLEVBQWxDLENBQVA7QUFDRCxDQUZNOzs7O0FBSUEsTUFBTVcsY0FBYyxDQUFDYixHQUFELEVBQWNDLEdBQWQsRUFBNEJhLGVBQWUsRUFBM0MsS0FBMEQ7QUFDbkYsTUFBR2QsR0FBSCxFQUFRO0FBQ04sUUFBR0MsR0FBSCxFQUFRO0FBQ05ELFlBQU1BLElBQUllLFFBQUosR0FBZWIsTUFBZixDQUFzQixDQUF0QixFQUF5QkQsR0FBekIsQ0FBTjtBQUNELEtBRkQsTUFFTztBQUNMRCxZQUFNQSxJQUFJZSxRQUFKLEVBQU47QUFDRDtBQUNGLEdBTkQsTUFNTztBQUNMZixVQUFNLEVBQU47QUFDRDs7QUFFREEsUUFBTUEsSUFBSUcsSUFBSixFQUFOOztBQUVBLE1BQUdXLGdCQUFnQmQsUUFBUSxFQUEzQixFQUErQjtBQUM3QkEsVUFBTWMsWUFBTjtBQUNEOztBQUVELFNBQU9kLEdBQVA7QUFDRCxDQWxCTTs7OztBQW9CQSxNQUFNZ0IsV0FBWUMsR0FBRCxJQUF5QjtBQUMvQyxNQUFHLHNCQUFTQSxHQUFULEtBQWlCQSxRQUFRLFdBQTVCLEVBQXlDO0FBQ3ZDQSxVQUFNQyxVQUFVRCxHQUFWLENBQU47QUFDRCxHQUZELE1BRU87QUFDTEEsVUFBTSxFQUFOO0FBQ0Q7O0FBRUQsU0FBT0EsSUFBSWQsSUFBSixFQUFQO0FBQ0QsQ0FSTTs7OztBQVVBLE1BQU1nQixnQkFBaUJDLFFBQUQsSUFBOEI7QUFDekQsTUFBRyxzQkFBU0EsUUFBVCxLQUFzQkEsYUFBYSxXQUF0QyxFQUFtRDtBQUNqREEsZUFBV0EsU0FBU0MsT0FBVCxDQUFpQixRQUFqQixFQUEyQixFQUEzQixFQUErQm5CLE1BQS9CLENBQXNDLENBQXRDLEVBQXlDLEVBQXpDLENBQVg7QUFDRCxHQUZELE1BRU87QUFDTGtCLGVBQVcsRUFBWDtBQUNEOztBQUVELFNBQU9BLFNBQVNqQixJQUFULEdBQWdCRyxXQUFoQixFQUFQO0FBQ0QsQ0FSTTs7OztBQVVBLE1BQU1nQixlQUFlLENBQUN0QixHQUFELEVBQWNDLEdBQWQsRUFBNEJhLGVBQWUsRUFBM0MsS0FBMEQ7QUFDcEYsTUFBR2QsR0FBSCxFQUFRO0FBQ05BLFVBQU0scUJBQVFBLElBQUllLFFBQUosR0FBZVosSUFBZixFQUFSLEVBQStCLFVBQS9CLEVBQTJDLEVBQTNDLENBQU47O0FBRUEsUUFBR0YsR0FBSCxFQUFRO0FBQ05ELFlBQU1BLElBQUlFLE1BQUosQ0FBVyxDQUFYLEVBQWNELEdBQWQsQ0FBTjtBQUNEO0FBQ0YsR0FORCxNQU1PO0FBQ0xELFVBQU0sRUFBTjtBQUNEOztBQUVELE1BQUdjLGdCQUFnQmQsUUFBUSxFQUEzQixFQUErQjtBQUM3QkEsVUFBTWMsWUFBTjtBQUNEOztBQUVELFNBQU9kLEdBQVA7QUFDRCxDQWhCTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTdHJpbmcsIHJlcGxhY2V9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBjb25zdCBwYXJzZUNoYXIgPSAoc3RyOiBzdHJpbmcsIG1heD86IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGlmKGlzU3RyaW5nKHN0cikgJiYgc3RyICE9PSAndW5kZWZpbmVkJykge1xuICAgIHN0ciA9IHJlcGxhY2Uoc3RyLCAvW15hLXpBLVpdKy9nLCAnJykuc3Vic3RyKDAsIG1heCk7XG4gIH0gZWxzZSB7XG4gICAgc3RyID0gJyc7XG4gIH1cblxuICByZXR1cm4gc3RyLnRyaW0oKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZUVtYWlsID0gKGVtYWlsOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBlbWFpbCA9IChlbWFpbCB8fCAnJykudHJpbSgpLnN1YnN0cigwLCAxMjgpLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IHJlZ2V4ID0gL15cXHcrKFsuLV0/XFx3KykqQFxcdysoWy4tXT9cXHcrKSooXFwuXFx3ezIsM30pKyQvO1xuXG4gIHJldHVybiBlbWFpbCAhPT0gJycgJiYgcmVnZXgudGVzdChlbWFpbCkgPyBlbWFpbCA6ICcnO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlSWQgPSAoaWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGlmKGlzU3RyaW5nKGlkKSAmJiBpZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZCA9IHJlcGxhY2UoaWQsIC9bXlxcd10vZywgJycpLnN1YnN0cigwLCAzMik7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSAnJztcbiAgfVxuXG4gIHJldHVybiBpZC50cmltKCk7XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VQYXNzd29yZCA9IChwYXNzd29yZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIChwYXNzd29yZCB8fCAnJykudHJpbSgpLnN1YnN0cigwLCAzMik7XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VTdHJpbmcgPSAoc3RyOiBzdHJpbmcsIG1heD86IG51bWJlciwgZGVmYXVsdFZhbHVlID0gJycpOiBzdHJpbmcgPT4ge1xuICBpZihzdHIpIHtcbiAgICBpZihtYXgpIHtcbiAgICAgIHN0ciA9IHN0ci50b1N0cmluZygpLnN1YnN0cigwLCBtYXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBzdHIudG9TdHJpbmcoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RyID0gJyc7XG4gIH1cblxuICBzdHIgPSBzdHIudHJpbSgpO1xuXG4gIGlmKGRlZmF1bHRWYWx1ZSAmJiBzdHIgPT09ICcnKSB7XG4gICAgc3RyID0gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZVVybCA9ICh1cmw6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGlmKGlzU3RyaW5nKHVybCkgJiYgdXJsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHVybCA9IGVuY29kZVVSSSh1cmwpO1xuICB9IGVsc2Uge1xuICAgIHVybCA9ICcnO1xuICB9XG5cbiAgcmV0dXJuIHVybC50cmltKCk7XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VVc2VybmFtZSA9ICh1c2VybmFtZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgaWYoaXNTdHJpbmcodXNlcm5hbWUpICYmIHVzZXJuYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgIHVzZXJuYW1lID0gdXNlcm5hbWUucmVwbGFjZSgvW15cXHddL2csICcnKS5zdWJzdHIoMCwgMzIpO1xuICB9IGVsc2Uge1xuICAgIHVzZXJuYW1lID0gJyc7XG4gIH1cblxuICByZXR1cm4gdXNlcm5hbWUudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VWYXJDaGFyID0gKHN0cjogc3RyaW5nLCBtYXg/OiBudW1iZXIsIGRlZmF1bHRWYWx1ZSA9ICcnKTogc3RyaW5nID0+IHtcbiAgaWYoc3RyKSB7XG4gICAgc3RyID0gcmVwbGFjZShzdHIudG9TdHJpbmcoKS50cmltKCksIC9bXlxcd1xcc10vZywgJycpO1xuXG4gICAgaWYobWF4KSB7XG4gICAgICBzdHIgPSBzdHIuc3Vic3RyKDAsIG1heCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN0ciA9ICcnO1xuICB9XG5cbiAgaWYoZGVmYXVsdFZhbHVlICYmIHN0ciA9PT0gJycpIHtcbiAgICBzdHIgPSBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcbiJdfQ==